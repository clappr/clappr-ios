# Customize this file, documentation can be found here:
# https://docs.fastlane.tools/actions/
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.131.0"

before_all do
  # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  # cocoapods
  carthage(
    platform: 'iOS,tvOS',
    cache_builds: true
  )
end

desc "Runs all the tests"
lane :test do
  scan(scheme: "Clappr_tvOS", devices: ["Apple TV 4K"], output_directory: "fastlane/test_output_tvos")
  xcov(scheme: "Clappr_tvOS", output_directory: "fastlane/xcov_report_tvos")

  scan(scheme: "Clappr_Example", devices: ["iPhone 8"], output_directory: "fastlane/test_example_output_ios")

  scan(scheme: "Clappr", devices: ["iPhone 8"], output_directory: "fastlane/test_output_ios")
  xcov(scheme: "Clappr", output_directory: "fastlane/xcov_report_ios")
end

desc "Runs swiftlint producing an html report"
lane :lint do
  swiftlint(
    output_file: "swiftlint-report.html",
    ignore_exit_status: true,
    reporter: "html"
  )
  UI.success("Swiftlint report available at swiftlint-report.html.")
end

desc "Bump version in Podspec and Info.plist"
lane :version_bump do |options|
  version = options[:version]
  version_bump_podspec(path: "Clappr.podspec", version_number: version)

  update_info_plist(
    plist_path: "Sources/Info.plist",
    block: lambda { |plist|
      plist["CFBundleShortVersionString"] = version
    }
  )

  increment_build_number_in_plist(
    build_number: version,
    xcodeproj: "Clappr.xcodeproj",
    target: "Clappr"
  )
end


desc "Bump version in all necessary files"
lane :bump do |options|
  version = options[:version]
  puts "Version from parameter: " + version

  version_bump_podspec(path: ENV['podspec_file'], version_number: version)
end

desc "Release a new snapshot"
lane :release_snapshot do |options|
  version = options[:version].to_s
  UI.user_error!("You need to provide the new version number like: make release_snapshot version='X.X.X'") if version.strip.empty? || !version.include?("snapshot")

  ensure_git_status_clean

  test

  bump(options)

  set_github_release(
    repository_name: "clappr/clappr-ios",
    api_token: ENV["GITHUB_TOKEN"],
    name: version,
    tag_name: version,
    description: "TODO: write release notes here",
    is_prerelease: true
  )

  pod_push(
    allow_warnings: true
  )

  reset_git_repo
end

desc "Release a new version of Clappr"
lane :release do |options|
  UI.user_error!("You need to provide the new version number like: make release version=X.X.X") if options[:version].to_s.strip.empty?

  ensure_environment_vars

  pull_dev_and_master

  ensure_git_status_clean

  ensure_git_branch(
    branch: 'dev'
  )

  test unless options[:ignore_unit_tests]

  branch_name = "release/#{options[:version]}"
  create_branch(branch_name)

  version_bump(options)

  git_add

  commit_version_bump(
    xcodeproj: "Clappr.xcodeproj",
    force: true
  )

  push_to_git_remote(
    local_branch: branch_name,
    remote_branch: branch_name,
    tags: false
  )

  merge(
    branch: branch_name,
    into: "master"
  )

  push_to_git_remote(
    local_branch: "master",
    remote_branch: "master",
    tags: false
  )

  merge(
    branch: branch_name,
    into: "dev"
  )

  push_to_git_remote(
    local_branch: "dev",
    remote_branch: "dev",
    tags: false
  )

  delete_branch(branch_name)

  checkout("master")

  add_git_tag(
    tag: "#{options[:version]}"
  )

  push_to_git_remote(
    local_branch: "master",
    remote_branch: "master",
    tags: true
  )

  set_github_release(
    repository_name: "clappr/clappr-ios",
    api_token: ENV["GITHUB_TOKEN"],
    name: "",
    tag_name: options[:version],
    description: "TODO: write release notes here"
  )

  pod_push(
    allow_warnings: true
  )
end

desc "Release a new version of Clappr from CI"
lane :release_from_ci do
  last_dev_commit_hash = Actions.sh("git log origin/dev --pretty=format:'%H' -n 1")
  UI.user_error!("‚ùå Only the last commit from origin/dev is allow to generate a new automated version ‚ùå") if last_git_commit[:commit_hash].to_s != last_dev_commit_hash.to_s

  version = increment_version_number_in_plist(
              xcodeproj: "Clappr.xcodeproj",
              target: "Clappr",
              bump_type: "minor"
            )

  release({
    version: version,
    ignore_unit_tests: true
  })
end

def create_branch(branch_name)
  Actions.sh("git checkout -b #{branch_name}")
  UI.success("Successfully created branch \"#{branch_name}\" üíæ.")
end

def merge(branch:, into:)
  checkout("#{into}")
  Actions.sh("git pull origin #{into}")
  Actions.sh("git merge #{branch}")
  UI.success("Successfully merged \"#{branch}\" into \"#{into}\" üíæ.")
end

def delete_branch(branch_name)
  Actions.sh("git push -d origin #{branch_name}")
  Actions.sh("git branch -D #{branch_name}")
end

def checkout(branch_name)
  Actions.sh("git checkout #{branch_name}")
end

def ensure_environment_vars
  UI.user_error!("You need to setup a GITHUB_TOKEN enviroment var.") unless ENV["GITHUB_TOKEN"]
end

def pull_dev_and_master
  Actions.sh("git push origin dev:dev")
  Actions.sh("git fetch origin dev:dev --update-head-ok")
  Actions.sh("git push origin master:master")
  Actions.sh("git fetch origin master:master --update-head-ok")
end

# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded.
# Learn more at https://docs.fastlane.tools/#metrics
